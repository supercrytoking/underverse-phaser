{"version":3,"sources":["src/CST.ts","src/scenes/LoadScene.ts","src/scenes/MenuScene.ts","src/scenes/GameScene.ts","src/main.ts"],"names":[],"mappings":"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","file":"main.9de2291d.js","sourceRoot":"..","sourcesContent":["export const CST = {\n    SCENES: {\n        LOAD: 'LOAD',\n        MENU: 'MENU',\n        GAME: 'GAME'\n    },\n    IMAGES: {\n        MENU_BG: 'menu-background.png',\n        LOGIN_BTN: 'login-button.png',\n        REGISTER_BTN: 'register-button.png',\n        PLAYER: 'player.png',\n        TERRAIN_ATLAS: 'terrain_atlas.png',\n        GAMEPAD_A: 'gamepad-a.png',\n        GAMEPAD_B: 'gamepad-b.png',\n        GAMEPAD_X: 'gamepad-x.png',\n        GAMEPAD_Y: 'gamepad-y.png'\n    },\n    AUDIO: {\n        MENU_MUSIC: 'menu-music.m4a'\n    }\n}","import { CST } from '../CST';\n\nexport class LoadScene extends Phaser.Scene {\n    constructor() {\n        super({\n            key: 'CST.SCENES.LOAD'\n        });\n    }\n\n    loadImages() {\n        this.load.setPath(`./assets/img`)\n        for (var i in CST.IMAGES) {\n            // console.log(`${i}, ${CST.IMAGES[i]}`);\n            this.load.image(i, CST.IMAGES[i]);\n        }\n    }\n\n    loadAudio() {\n        this.load.setPath(`./assets/audio`);\n        for (var i in CST.AUDIO) {\n            // console.log(`${i}, ${CST.AUDIO[i]}`);\n            this.load.audio(i, CST.AUDIO[i]);\n        }\n    }\n\n    loadSprites() {\n        this.load.setPath(`./assets/sprites`);\n        this.load.atlas('PLAYER_SPRITEZ' 'player-sprites.png', 'player-sprites.json');\n    }\n\n    preload() {\n        console.log('Loading...');\n        this.loadImages();\n        this.loadAudio();\n        this.loadSprites();\n\n        let loadingBar = this.add.graphics({\n            fillStyle: {\n                color: 0x700000\n            }\n        });\n\n        this.load.on('progress', (percentage) => {\n            loadingBar.fillRect(0, this.game.renderer.height - 20, this.game.renderer.width * percentage, 20)\n        });\n\n        this.load.on('complete', () => {\n            this.scene.start(CST.SCENES.MENU);\n            // this.scene.start(CST.SCENES.GAME);\n        });\n\n        this.load.on('load', (file: Phaser.Loader.File) => {\n            console.log(`Loaded ${file.key}.`);\n        });\n    }\n}","import { CST } from '../CST';\n\nexport class MenuScene extends Phaser.Scene {\n    constructor() {\n        super({\n            key: CST.SCENES.MENU\n        });\n    }\n    preload() {}\n    create() {\n        // this.sound.play('MENU_MUSIC', {\n        //     loop: true\n        // });\n\n        this.bg = this.add.image(0, 0, 'MENU_BG').setOrigin(0);\n        this.bg.alpha = 0.2;\n        this.bg.displayWidth = this.game.renderer.width;\n        this.bg.displayHeight = this.game.renderer.height;\n\n        let opacityTimer = setInterval(() => {\n            if (this.bg.alpha == 1) clearInterval(opacityTimer);\n            // console.log(`Menu opacity: ${this.bg.alpha}`);\n            this.bg.alpha = this.bg.alpha + 0.01\n        }, 300)\n\n        let loginButton = this.add.image(this.game.renderer.width / 2, this.game.renderer.height - 20, 'LOGIN_BTN').setOrigin(0.5, 1);\n        loginButton.setInteractive();\n        loginButton.on('pointerdown', () => {\n            this.scene.start(CST.SCENES.GAME);\n            this.sound.stopAll();\n        });\n\n        let registerButton = this.add.image(this.game.renderer.width / 2, this.game.renderer.height - 60, 'REGISTER_BTN').setOrigin(0.5, 1);\n        registerButton.setInteractive();\n        registerButton.on('pointerdown', () => {\n            this.scene.start(CST.SCENES.GAME);\n            this.sound.stopAll();\n        }); \n    }\n}","import { CST } from '../CST';\n\nexport class GameScene extends Phaser.Scene {\n    constructor() {\n        super({\n            key: CST.SCENES.GAME\n        });\n    }\n    preload() {\n        this.load.tilemapTiledJSON('map', './assets/maps/map.json');\n\n        this.anims.create({\n            key: 'PLAYER_ANIMATION',\n            frameRate: 4,\n            frames: this.anims.generateFrameNames('PLAYER_SPRITEZ', {\n                prefix: 'player-',\n                start: 1,\n                end: 4,\n                suffix: '.png'\n            }),\n            repeat: -1\n        });\n\n        this.anims.create({\n            key: 'PLAYER_ANIMATION_NORTH',\n            frameRate: 4,\n            frames: this.anims.generateFrameNames('PLAYER_SPRITEZ', {\n                prefix: 'player-',\n                start: 1,\n                end: 4,\n                suffix: '.png',\n                frames: [1]\n            })\n        });\n\n        this.anims.create({\n            key: 'PLAYER_ANIMATION_SOUTH',\n            frameRate: 4,\n            frames: this.anims.generateFrameNames('PLAYER_SPRITEZ', {\n                prefix: 'player-',\n                start: 1,\n                end: 4,\n                suffix: '.png',\n                frames: [3]\n            })\n        });\n\n        this.anims.create({\n            key: 'PLAYER_ANIMATION_EAST',\n            frameRate: 4,\n            frames: this.anims.generateFrameNames('PLAYER_SPRITEZ', {\n                prefix: 'player-',\n                start: 1,\n                end: 4,\n                suffix: '.png',\n                frames: [2]\n            })\n        });\n\n        this.anims.create({\n            key: 'PLAYER_ANIMATION_WEST',\n            frameRate: 4,\n            frames: this.anims.generateFrameNames('PLAYER_SPRITEZ', {\n                prefix: 'player-',\n                start: 1,\n                end: 4,\n                suffix: '.png',\n                frames: [4]\n            })\n        });\n    }\n    create() {\n        // this.players = {}\n\n        // this.socket = io();\n\n        // this.socket.on('currentPlayers', (players) => {\n        //     Object.keys(players).forEach((id) => {\n        //         console.log(`Connected: ${id}`);\n        //         this.players[id] = this.physics.add.sprite(players[id].x, players[id].y, 'PLAYER').setScale(0.5).setDepth(1);\n        //     });\n        // });\n\n        // this.socket.on('disconnect', (id) => {\n        //     console.log(`Disconnected: ${id}`);\n        //     this.players[id].destroy();\n        // });\n\n        var buttonPadding = 40;\n        var buttonMargin = 80;\n        var buttonSize = 80;\n\n        var abtn = this.add.sprite(this.game.renderer.width - buttonPadding - buttonMargin, this.game.renderer.height - buttonPadding, 'GAMEPAD_A').setDepth(4).setOrigin(1, 1);\n        abtn.setDisplaySize(buttonSize, buttonSize);\n        abtn.setScrollFactor(0);\n\n        var bbtn = this.add.sprite(this.game.renderer.width - buttonPadding, this.game.renderer.height - buttonPadding - buttonMargin, 'GAMEPAD_B').setDepth(4).setOrigin(1, 1);\n        bbtn.setDisplaySize(buttonSize, buttonSize);\n        bbtn.setScrollFactor(0);\n\n        var xbtn = this.add.sprite(0 + buttonPadding, this.game.renderer.height - buttonPadding - buttonMargin, 'GAMEPAD_X').setDepth(4).setOrigin(0, 1);\n        xbtn.setDisplaySize(buttonSize, buttonSize);\n        xbtn.setScrollFactor(0);\n\n        var ybtn = this.add.sprite(0 + buttonPadding + buttonMargin, this.game.renderer.height - buttonPadding, 'GAMEPAD_Y').setDepth(4).setOrigin(0, 1);\n        ybtn.setDisplaySize(buttonSize, buttonSize);\n        ybtn.setScrollFactor(0);\n\n        let map = this.add.tilemap('map');\n        let terrain = map.addTilesetImage('terrain_atlas', 'TERRAIN_ATLAS');\n        let bottomLayer = map.createStaticLayer('FirstLayer', [terrain], 0, 0).setDepth(0);\n        let topLayer = map.createStaticLayer('SecondLayer', [terrain], 0, 0).setDepth(2);\n\n        this.player = this.physics.add.sprite(100, 100, 'PLAYER_SPRITEZ', 'player-1.png').setScale(2).setDepth(1);\n        // this.player = this.physics.add.sprite(100, 100, 'PLAYER').setScale(2).setDepth(1);\n        // this.player = this.physics.add.sprite(map.widthInPixels / 2, map.heightInPixels - 20, 'PLAYER').setScale(0.5).setDepth(1);\n\n        this.player.body.collideWorldBounds = true;\n\n        this.physics.add.collider(this.player, topLayer);\n        topLayer.setCollisionByProperty({ collides: true })\n\n        this.cameras.main.startFollow(this.player);\n        this.cameras.main.setBounds(0, 0, map.widthInPixels, map.heightInPixels);\n        this.physics.world.setBounds(0, 0, map.widthInPixels, map.heightInPixels);\n\n        this.keyboard = this.input.keyboard.addKeys('W, S, A, D');\n        this.input.on('pointerdown', (pointer) => {\n            this.startX = pointer.x;\n            this.startY = pointer.y;\n        })\n\n        this.input.on('pointerup', (pointer) => {\n            this.swipe = {}\n        })\n\n        this.swipe = {}\n    }\n\n    update(time, delta) {\n        var speed = 120;\n\n        var pointer = this.game.input.activePointer;\n        var threshold = 40;\n\n        if (this.swipe.direction) {\n            this.physics.moveTo(this.player, pointer.worldX, pointer.worldY, speed);\n        }\n        if (pointer.isDown) {\n            // console.log(this.swipe);\n            // console.log(`Start: ${this.startX} ${this.startY}, Current: ${pointer.x} ${pointer.y}`);\n            if (pointer.x > (this.startX + threshold)) {\n                this.swipe.right = true;\n                this.swipe.direction = 'right';\n            }\n            if (pointer.x < (this.startX - threshold)) {\n                this.swipe.left = true;\n                this.swipe.direction = 'left';\n            }\n            if (pointer.y > (this.startY + threshold)) {\n                this.swipe.down = true;\n                this.swipe.direction = 'down';\n            }\n            if (pointer.y < (this.startY - threshold)) {\n                this.swipe.up = true;\n                this.swipe.direction = 'up';\n            }\n        }\n\n        // WSAD movement.\n        if (this.keyboard.W.isDown) {\n            this.player.setVelocityY(-Math.abs(speed));\n            this.player.play('PLAYER_ANIMATION_NORTH');\n        }\n        if (this.keyboard.S.isDown) {\n            this.player.setVelocityY(speed);\n            this.player.play('PLAYER_ANIMATION_SOUTH');\n        }\n        if (this.keyboard.A.isDown) {\n            this.player.setVelocityX(-Math.abs(speed));\n            this.player.play('PLAYER_ANIMATION_WEST');\n        }\n        if (this.keyboard.D.isDown) {\n            this.player.setVelocityX(speed);\n            this.player.play('PLAYER_ANIMATION_EAST');\n        }\n\n        // Movement reset.\n        if (this.keyboard.W.isUp && this.keyboard.S.isUp && !pointer.isDown) {\n            this.player.setVelocityY(0);\n        }\n\n        if (this.keyboard.A.isUp && this.keyboard.D.isUp && !pointer.isDown) {\n            this.player.setVelocityX(0);\n        }\n    }\n}","/** @type {import(\"../typings/phaser\")} **/\n\n\nimport { LoadScene } from './scenes/LoadScene';\nimport { MenuScene } from './scenes/MenuScene';\nimport { GameScene } from './scenes/GameScene';\n\nvar config = {\n    type: Phaser.CANVAS,\n    scale: {\n        mode: Phaser.Scale.FIT,\n        width: window.innerWidth / 1.3,\n        height: window.innerHeight / 1.3\n    },\n    scene: [\n        LoadScene, MenuScene, GameScene\n    ],\n    physics: {\n        default: 'arcade',\n        arcade: {\n            debug: true\n        }\n    },\n    pixelArt: true\n}\n\nlet game = new Phaser.Game(config);"]}